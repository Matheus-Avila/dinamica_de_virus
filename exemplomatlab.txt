function [yt,ut] = HepC2(t,y,ny,u,nu,x,nxbe)
% function to define the time derivative of a 1d pde
% y is a one dimensional vector of the ODE solutions
% u(ix,iu) is matrix of the PDE solution on the extended grid x
% t is the current time

% u(ix,iu) lives on the extended grid x(ix) defined by the indicies in
% nxbe(4).  They are defined for ix=nxbe(1):nxbe(4).  The physical solution
% correspondes to ix=nxbe(2):nxbe(3).  That is x(nxbe(2))=xi(1) and
% x(nxbe(3))=xi(nx).
%
% yt and ut are the output time derivatives of the solutions with the same
% dimensions as y and u.

% version 4/1/2013  Mac Hyman
global  lequation lbcx mord mord1 mord2 % numerical parameters global variables
global alpha beta delta epsilon_alpha epsilon_s kappa rho mu  s d c % global parameters

%  ---------- begin set-up for pde solver
%[ndx,~] = size(u); % Barbara: changed to be compatible to Matlab version 7
[ndx,temp] = size(u);
clear temp;
yt=NaN(size(y));
ut = NaN(ndx,nu); % preallocate space for the time derivative
  
        % Boundary conditions at nxb=nxbe(2) (the left boundary point)
        nxb=nxbe(2); dx =x(2)-x(1); % index for the left boundary condition at x(nxb)=0
        u(nxb,1)=beta*y(1)*y(2); % I(0,t) = beta*V*T
        u(nxb,2)=1; % R(0,t)=1
        u = bcx_1d(u,x,nxbe,lbcx); % use BC to extend the solution to external points
        
        %  unpack the variables
        T = y(1);
        V = y(2);
        I = u(:,1);
        R = u(:,2);
        
        %  define the ODE equations
        T_t = s - beta*V*T - d*T;
        tmp=rho.*R.*I;
        quad = quad1d(x,tmp(nxbe(2):nxbe(3)),'trapezoidal',6);
        V_t = (1-epsilon_s)*quad - c*V;
        
        
        % define the spatial derivatives equations
        I_x = d1x_1d(I,x,nxbe,mord1);
        R_x = d1x_1d(R,x,nxbe,mord1);
        
        I_t = -I_x - delta.*I;
        R_t = -R_x + (1-epsilon_alpha)*alpha -((1-epsilon_s)*rho + kappa*mu).*R;
        
        % artificial dissipation possibly needed for sharp pulses
        I_t = I_t + 0.1*dx*d2x_1d(I,x,nxbe,mord2);
        R_t = R_t + 0.1*dx*d2x_1d(R,x,nxbe,mord2);
        
        %  define the differential equations for the boundary conditions
        I_t(nxb)= beta*(V_t*T + V*T_t); % I_t(0,t) = beta*(V'*T + V*T')
        R_t(nxb)=0; % R_t(0,t) = 0

        %  repack the time derivatives of the variables
        yt(1)=T_t;
        yt(2)=V_t;
        ut(:,1)=I_t;
        ut(:,2)=R_t;

end